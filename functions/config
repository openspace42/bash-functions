#!/usr/bin/env bash

dna-set_option() {

	########################################################################

	if [ $# -eq 0 ]
    then
        dna-echo -e "No argument supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	while getopts ":o:t:p:d:c:h:v:s:" arguments
	do
		case "${arguments}" in
			o)	option="${OPTARG}"
				;;
			t)	type="${OPTARG}"
				;;
			p)	path="${OPTARG}"
				;;
			d)	describe="${OPTARG}"
				;;
			c)	choices="${OPTARG}"
				;;
			h)	hint="${OPTARG}"
				;;
			v)	validate="${OPTARG}"
				;;
			s)	setting="${OPTARG}"
				;;
			\?)	dna-echo -e "Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
				;;
		esac
	done
	OPTIND=1

	if [ -z "${option-}" ]
	then
		dna-echo -e "Argument | ${n-}option [-o]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
		dna-exit
	fi

	if [ ! -z "${type-}" ]
	then
		case "${type}" in
			g)	setting_type="global"
				;;
			p)	setting_type="project_specific"
				;;
			*)	dna-echo -e "Invalid content for describe argument in function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
				;;
		esac
	fi

	if [ ! -z "${describe-}" ]
	then
		case "${describe}" in
			y)	describe_setting=y
				;;
			n)	describe_setting=n
				;;
			*)	dna-echo -e "Invalid content for describe argument in function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
				;;
		esac
	fi

	if [ ! -z "${hint-}" ]
	then
		case "${hint}" in
			y)	hint_value=y
				;;
			n)	hint_value=n
				;;
			*)	dna-echo -e "Invalid content for describe argument in function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
				;;
		esac
	fi

	if [ ! -z "${validate-}" ]
	then
		case $validate in
			y)	validate_input=y
				;;
			n)	validate_input=n
				;;
			*)	dna-echo -e "Invalid content for validate argument in function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
				;;
		esac
	fi

	########################################################################

	mkdir -p "${conf_dir}"

	if [ ! -z "${setting_type-}" ]
	then
		if [ "${setting_type}" = "global" ]
		then
			setting_conf_dir="${os_conf_dir}"
		elif [ "${setting_type}" = "project_specific" ]
		then
			setting_conf_dir="${conf_dir}"
		fi
	else
		setting_conf_dir="${conf_dir}"
	fi

	if [ ! -z "${path-}" ]
	then

		path_leading_char="$(echo $path | cut -c1-1)"

		if [ "${path_leading_char}" = "/" ]
		then
			path_type="absolute"
		else
			path_type="relative"
		fi

		if [ "${path_type}" = "absolute" ]
		then
			opt_base_path="${path}"
		else
			opt_base_path="${setting_conf_dir}/${path}"
			mkdir -p "${opt_base_path}"
		fi

		opt_path="${opt_base_path}/${option}"

	else

		opt_path="${setting_conf_dir}/${option}"

	fi

	if [ -z "${setting-}" ]
	then

		if [ -f "${opt_path}" ]
		then

			previous_value="$(cat ${opt_path})"

			if [ -n "${previous_value}" ]
			then

				if [ "${validate_input-null}" = "y" ]
				then

					input="${previous_value}"

					### If | -v y | then | validate_input | must be defined immediately prior to calling this function.

					validate_input

				else

					valid="y"

				fi

			else

				valid="n"

			fi

		else

			touch "${opt_path}"
			valid="n"

		fi

		if [ "${valid}" = "y" ]
		then

			dna-echo -m "Your previous value for option | ${o-}$option${n-} | was: | ${y-}$previous_value${n-} |."

			if [ ! -z "${choices-}" ]
			then
				dna-echo -m "The possible choices for this value are: | ${y-}${choices}${n-} |."
			fi

			dna-ask_for_boolean -d "y" -q "Is this still correct?"

			if [ "${boolean_output}" = "y" ]
			then

				dna-echo -m "Ok, keeping | ${y-}${previous_value}${n-} | as your value for option | ${o-}${option}${n-} |."

				value="${previous_value}"
				previous_value_outcome="kept"

			else

				unset valid
				previous_value_outcome="not-kept"

			fi

			unset valid

		else

			previous_value_outcome="not-applicable"

		fi

		if [ -z "${value-}" ]
		then

			unset defined

			until [ "${defined-null}" = "y" ]
			do

				unset valid

				until [ "${valid-null}" = "y" ]
				do

					unset new_value

					until [ -n "${new_value-}" ]
					do

						ask_for_value() {

							if [ "${hint_value-null}" = "y" ]
							then

								### If | -h y | then | hint_value | must be defined immediately prior to calling this function.

								hint_value

							fi

							if [ -z "${new_value-}" ]
							then

								read -rp "${b-}Now specify your new value for option | ${o-}${option}${n-} | ${y-}${choices-}${n-}: ${x-}" new_value
								echo

							fi

						}

						if [ "${skip_descr-null}" = "y" ]
						then

							ask_for_value

						else

							if [ "${describe_setting-null}" = "y" ]
							then

								### If | -d y | then | describe_setting | must be defined immediately prior to calling this function.

								describe_setting

							fi

							ask_for_value

						fi

					done

					if [ "${validate_input-null}" = "y" ]
					then

						input="${new_value}"

						### validate_input must be defined immediately prior to calling this function.

						validate_input

					else

						valid=y

					fi

				done

				unset acceptable

				until [ "${acceptable-null}" = "y" ]
				do

					read -n 1 -rp "${b-}Is | ${y-}${new_value}${n-} | correct? (Y/n/e[xit]) ${x-}" answer;
					case $answer in
						"")	echo
							acceptable="y"
							defined="y"
							;;
						y)	echo -e "\\n"
							acceptable="y"
							defined="y"
							;;
						n)	echo -e "\\n"
							dna-echo -m "Ok, try again."
							acceptable="y"
							defined="n"
							;;
						e)	echo -e "\\n"
							dna-exit
							;;
						*)	echo -e "\\n"
							dna-echo -e "Invalid option. Retry."
							acceptable="n"
							defined="n"
							;;
					esac

				done

			done

			echo "${new_value}" > "${opt_path}"

			dna-echo -m "Option | ${o-}${option}${n-} | set to value | ${y-}${new_value}${n-} |."

		fi

	else

		touch "${opt_path}"
		echo "${setting}" > "${opt_path}"

		dna-echo -m "Option | ${o-}${option}${n-} | set to value | ${y-}${setting}${n-} |."

	fi

	value="$(cat ${opt_path})"
	export "${option}"="${value}"

	unset arguments option path describe choices hint validate setting validate_input describe_setting hint_value valid value skip_descr defined new_value

}

dna-set_admin_email() {

	describe_setting() {

		dna-echo -m "${project_name} sends you email notifications for any scheduled job runtime errors and / or failures."

	}

	dna-set_option -o "admin_mail" -d "y" -v "n"
}
