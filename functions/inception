#!/usr/bin/env bash

dna-set_hostname() {

    dna-set_option -o "hostname" -p "/etc" -d "n" -v "n"

    hostname -F "/etc/hostname"

}

dna-set_locale() {

    dna-echo -m "Now setting locale to | ${y-}en_US.UTF-8${n-} |...${x-}"

    ### /etc/environment

    echo "LC_ALL=en_US.UTF-8" >> "/etc/environment"

    ### /etc/default/locale

    echo -e 'LC_ALL="en_US.UTF-8"' > "/etc/default/locale"
    echo -e 'LANG="en_US.UTF-8"' >> "/etc/default/locale"
    echo -e 'LANGUAGE="en_US:en"' >> "/etc/default/locale"

    ### /etc/locale.conf

    echo "LANG=en_US.UTF-8" > "/etc/locale.conf"

    ### /etc/locale.gen

    echo "en_US.UTF-8 UTF-8" > "/etc/locale.gen"

    ### Forcefully regenerate locales

    locale-gen en_US.UTF-8
    echo

    ### Set LC_ALL for this session
    ### twice as the first one always returns an error

    export LC_ALL="en_US.UTF-8"
    export LC_ALL="en_US.UTF-8"

    ### Update locale

    update-locale LANG=en_US.UTF-8

    ### Reconfigure locales

    dpkg-reconfigure --frontend=noninteractive locales

    ### Source locale

    . "/etc/default/locale"

    dna-echo -s "Locale set."

}

dna-set_ssh_pubkey() {

    if [ -f "${ssh_auth_keys_file}" ]
    then
        dna-echo -s "SSH Authorized Keys file found."
        ssh_auth_keys_contents="$(cat ${ssh_auth_keys_file})"
        dna-echo -m "Its content is currently:"
        echo "${ssh_auth_keys_contents}"
        echo
    else
    	dna-echo -m "SSH Authorized Keys file NOT found. Creating it now..."
    	mkdir -p "/root/.ssh/"
        touch "${ssh_auth_keys_file}"
    fi

    chown "root:root" "${ssh_auth_keys_file}"
    chmod "600" "${ssh_auth_keys_file}"

    dna-ask_for_boolean -d "y" -q "Set your public SSH key now?"

    if [ "${boolean_output}" = "y" ]
    then

        validate_input() {

			dna-validate_ssh_pubkey -s -k "${input}"

			if [ "${key_is_valid}" = "y" ]
			then
				valid="y"
			else
				dna-echo -e "The key you specified does NOT appear to be a valid SSH Public Key."
				valid="n"
			fi

            unset silent

		}

        dna-set_value -d "Ok, now paste the ssh public key you copied from your local workstation:" -v "y"

        new_key="${value}"

        if ! grep -q "${new_key}" "${ssh_auth_keys_file}"
		then
			echo "${new_key}" >> "${ssh_auth_keys_file}"
		fi

    	chmod 600 "${ssh_auth_keys_file}"

    	dna-echo -s "SSH Public key set."

        unset value new_key

    else

    	dna-echo -m "Skipping SSH key setting."

    fi

}

dna-harden_ssh() {

    ### Install sshd

    dna-install_dependencies -p "openssh-server"

    alert_force_alt_ssh_port() {

        dna-echo -e "${project_name} requires your SSH port to be changed to: | ${n-}42022${r-} |."
        dna-echo -m "This will happen automatically if you choose to continue the installation."
        dna-echo -m "To connect once again to this machine in the future simply use:"
        dna-echo -m " | ssh ${c-}-p 42022${n-} [...] | "
        dna-press_to_continue

    }

    while getopts ":p" arguments
    do
        case "${arguments}" in
            p)	local force_alt_ssh_port="y"
                ;;
            \?)	dna-echo -e "Invalid option | ${n-}-${OPTARG}${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
                dna-exit
                ;;
        esac
    done
    OPTIND=1

    dna-echo -m "It is highly recommended to only allow SSH connections via keypair and disable password-based authentication."
    dna-echo -m "Only answer yes to this question if you've previously entered your SSH public key when prompted."

    dna-ask_for_boolean -d "y" -q "Also set setting SSH hardened values now?"

    if [ "${boolean_output}" = "y" ]
    then

        dna-sshd_set_config_value -n "PermitRootLogin" -v "without-password"

        dna-sshd_set_config_value -n "PasswordAuthentication" -v "no"

    else

        dna-echo -m "Ok, skipping hardening SSH values."

    fi

    dna-echo -m "It is recommended to increase the: | ${o-}MaxAuthTries${n-} | value to allow for automatic connections via ssh/mosh without the need to specify a keyfile on the client side every time."
    dna-ask_for_boolean -d "y" -q "Also increase the: | ${o-}MaxAuthTries${n-} | value to: | ${y-}16${n-} |?"

    if [ "${boolean_output}" = "y" ]
    then

        dna-sshd_set_config_value -n "MaxAuthTries" -v "16"

    else

        dna-echo -m "Ok, skipping increasing MaxAuthTries value."

    fi

    dna-echo -m "Now checking current SSH port setting..."

    if grep -Fq "Port " "${sshd_config_file}"
    then

    	dna-echo -m " | ${o-}Port${n-} | line found."

    	if grep -Eq '^ *Port ' "${sshd_config_file}"
    	then

    		dna-echo -m " | ${o-}Port${n-} | syntax correct."

    		if grep -Eq '^ *Port 42022' "${sshd_config_file}"
    		then

    			dna-echo -m " | ${o-}Port${n-} | already set to | ${y-}42022${n-} |."
    			ssh_port="42022"

    		else

    			curr_ssh_port="$(grep '^ *Port *' ${sshd_config_file} | sed 's|Port ||g')"

    			dna-echo -m "SSH port currently set to: | ${y-}${curr_ssh_port}${n-} |."

                if [ "${force_alt_ssh_port-null}" = "y" ]
                then

                    alert_force_alt_ssh_port

                    local set_alt_ssh_port="y"

                else

                    dna-ask_for_boolean -d "y" -q "Change it to 42022?"

                    if [ "${boolean_output}" = "y" ]
                    then

        				dna-echo -m "Ok, changing SSH Port to 42022"

                        local set_alt_ssh_port="y"

                    else

        				dna-echo -m "Leaving SSH port set to: | ${y-}${curr_ssh_port}${x-} |."

                        local set_alt_ssh_port="n"

                    fi

                fi

                if [ "${set_alt_ssh_port}" = "y" ]
                then

    				sed -i "/Port /c\Port 42022" "${sshd_config_file}"

    				dna-echo -s "SSH Port changed to 42022"

    				ssh_port="42022"

    			else

    				ssh_port="${curr_ssh_port}"

                fi

    		fi

    	else

            dna-echo -e " | ${n-}Port${r-} | syntax abnormal [commented, or other]. Fixing it now."

            if [ "${force_alt_ssh_port-null}" = "y" ]
            then

                alert_force_alt_ssh_port

                local set_alt_ssh_port="y"

            else

                dna-ask_for_boolean -d "y" -q "Also set it to 42022?"

                if [ "${boolean_output}" = "y" ]
                then

                    dna-echo -m "Ok, fixing syntax and setting | ${o-}Port${n-} | to | ${y-}42022${n-} |."

                    local set_alt_ssh_port="y"

        		else

        			dna-echo -m "Ok, fixing syntax but leaving | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

                    local set_alt_ssh_port="n"

    	        fi

            fi

            if [ "${set_alt_ssh_port}" = "y" ]
            then

                sed -i "/Port /c\Port 42022" "${sshd_config_file}"

                dna-echo -m "Line re-inserted with | ${o-}Port${n-} | set to | ${y-}42022${n-} |."

                ssh_port="42022"

            else

                sed -i "/Port /c\Port 22" "${sshd_config_file}"

                dna-echo -m "Line re-inserted with | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

                ssh_port="22"

            fi

    	fi

    else

        dna-echo -e " | ${n-}Port${r-} | line not found. Adding it now."

        if [ "${force_alt_ssh_port}" = "y" ]
        then

            alert_force_alt_ssh_port

            local set_alt_ssh_port="y"

        else

            dna-ask_for_boolean -d "y" -q "Also set it to 42022?"

            if [ "${boolean_output}" = "y" ]
            then

                dna-echo -m "Ok, adding | ${o-}Port${n-} | line and setting it to | ${y-}42022${n-} |."

        		local set_alt_ssh_port="y"

            else

                dna-echo -m "Ok, adding | ${o-}Port${n-} | line but leaving it set to | ${y-}22${n-} [standard] |."

        		local set_alt_ssh_port="n"

            fi

        fi

        if [ "${set_alt_ssh_port}" = "y" ]
        then

            sed -i '1iPort 42022' "${sshd_config_file}"

            dna-echo -m "Line added with | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

            ssh_port="42022"

        else

            sed -i '1iPort 22' "${sshd_config_file}"

            dna-echo -m "Line added with | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

            ssh_port="22"

        fi

    fi

    mkdir -p "${os_conf_dir}"
    echo "${ssh_port}" > "${os_conf_dir}/ssh_port"

    service ssh restart

}

dna-initialize_ufw() {

    dna-read_conf_settings

    dna-echo -m "Now installing UFW, setting | ${y-}limit ${ssh_port}${n-} |, and enabling."

    dna-install_dependencies -p "ufw"

    dna-echo -m "Allowing port | ${y-}${ssh_port}${n-} |."

    ufw limit "${ssh_port}"
    echo

    if [ ! "${ssh_port}" = "22" ]
    then

    	dna-echo -m "Also allowing port | ${y-}22${n-} | [for existing SSH sessions]."

    	ufw limit 22
    	echo

    fi

    dna-echo -m "Enabling UFW."

    ufw --force enable
    echo

    dna-echo -s "Finished installing and enabling UFW"

}

dna-prompt_ssh_connection_test() {

    ### Fetch public IPv4

    dna-get_public_ipv4 -s

    ### Restart SSH

    /usr/sbin/service ssh restart

    ### Prompt for test SSH connection

    dna-echo -m "It's now time to ensure that your SSH configuration on this machine is correct."
    dna-echo -m "Now open a new SSH session to this machine from your workstation with the SSH keypair and SSH port you previously entered and chose."
    dna-echo -e "Make absolutely sure you perform this test before answering the following question or you will be locked out of your machine!"

    dna-echo -m "The public IPv4 for this machine is: | ${l-}${public_ipv4}${n-} |."

    dna-ask_for_boolean -d "n" -q "Has the new SSH session worked?"

    if [ "${boolean_output}" = "y" ]
    then

        dna-echo -m "Ok, you can now close the other test session, and come back to this one."
        dna-press_to_continue

    else

        dna-echo -m "Ok, aborting this script now to allow you to perform the SSH configuration once again."
        dna-exit

    fi

}

dna-set_timezone() {

    dna-read -m "Now setting timezone. Do so at the next screen. Press enter to continue."
    dpkg-reconfigure tzdata

}

dna-create_non_root_user() {

    dna-echo -m "It's now time to create a user on this machine other than root."

    currusers="$(cat /etc/passwd | cut -d: -f 1,3,6 | grep "[1-9][0-9][0-9][0-9]" | grep "/home" | cut -d: -f1)"

    if [ -n "${currusers-}" ]
    then

        dna-echo -m "The currently existing users are:"
        dna-echo -m "${currusers}"

    else

        dna-echo -m "No currently existing users found."

    fi

    dna-ask_for_boolean -d "y" -q "Add non-root user now?"

    if [ "${boolean_output}" = "y" ]
    then

        dna-set_value -d "Ok, adding user now. Specify the new user's username:" -v "n"

        new_user="${value}"

    	adduser --disabled-password --gecos "" "${new_user}"
    	usermod -aG sudo "${new_user}"
    	echo

        dna-ask_for_boolean -d "y" -q "Also generate random password for | ${c-}${new_user}${n-} |?"

        if [ "${boolean_output}" = "y" ]
        then

    		non_root_user_pw="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)"

            dna-echo -m "Ok. Assigning user | ${o-}${new_user}${n-} | the following password:"
    		dna-echo -m " | ${y-}${non_root_user_pw}${n-} | "

    		echo "${new_user}:${non_root_user_pw}" | chpasswd

    		dna-press_to_continue

    	fi

        unset value new_user non_root_user_pw

    else

    	dna-echo -m "Skipping non-root user creation."

    fi

}

dna-secure_root_pw() {

    dna-ask_for_boolean -d "y" -q "Would you like to generate a random password for | ${c-}root${n-} |?"

    if [ "${boolean_output}" = "y" ]
    then

    	root_user_pw="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)"

    	dna-echo -m "Ok. Assigning user | ${o-}root${n-} | the following password:"
    	dna-echo -m " | ${y-}${root_user_pw}${n-} | "

    	echo "root:${root_user_pw}" | chpasswd

    	dna-press_to_continue

    else

    	dna-echo -m "Ok, skipping | ${o-}root${n-} | user password generation."

        dna-ask_for_boolean -d "y" -q "Would you instead like to entirely unset the password for | ${c-}root${n-} |?"

        if [ "${boolean_output}" = "y" ]
        then

    		dna-echo -m "Ok, unsetting | ${o-}root${n-} | password."
    		passwd -dl root
    		echo
    	else
    		dna-echo -m "Ok, not taking any action on | ${o-}root${n-} | password."
    	fi

    fi

}

dna-install_basic_packages() {

    ### Install basic packages

    dna-install_dependencies -p "sudo software-properties-common apt-transport-https curl ntp dnsutils haveged cronic unattended-upgrades fail2ban git glances htop pwgen pv bc rsync screen psmisc"

    ### Enable bash completion for screen

    echo "defshell -bash" > ~/.screenrc

    ### Start ntp in case it doesn't on its own

    service ntp start

    ### Install mosh and tmux

    dna-install_mosh_tmux

}

dna-inception() {

    if [ -f "${os_conf_dir}/inception_run_ok" ]
    then
        return 0
    fi

    ############################################################################

    while getopts ":fhmp" arguments
    do
        case "${arguments}" in
            f)	force_rerun="y"
                ;;
            h)	skip_hostname="y"
                ;;
            m)	skip_mail_notifications="y"
                ;;
            p)	force_alt_ssh_port="y"
                ;;
            \?)	dna-echo -e "Invalid option | ${n-}-${OPTARG}${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
                dna-exit
                ;;
        esac
    done
    OPTIND=1

    ############################################################################

    if [ ! -f "${os_conf_dir}/inception_run_status" ] || [ "${force_rerun-null}" = "y" ]
    then

        ########################################################################

        if [ ! "${skip_hostname-null}" = "y" ]
        then

            dna-set_hostname

        fi

        ########################################################################

        dna-set_locale

        dna-set_ssh_pubkey

        if [ "${force_alt_ssh_port-null}" = "y" ]
        then

            dna-harden_ssh -p

        else

            dna-harden_ssh

        fi

        dna-initialize_ufw

        dna-prompt_ssh_connection_test

        dna-set_timezone

        dna-create_non_root_user

        dna-secure_root_pw

        if [ ! "${skip_mail_notifications-null}" = "y" ]
        then

            dna-install_mail_notifications

        fi

        dna-install_basic_packages

        dna-apt_full_upgrade

        ########################################################################

        mkdir -p "${os_conf_dir}"
        echo "completed" > "${os_conf_dir}/inception_run_status"

        ########################################################################

        dna-echo -s "All done with inception operations."

    fi

}
