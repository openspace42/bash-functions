#!/usr/bin/env bash

dna-install_build_tools() {

    dna-install_dependencies -p "build-essential libpcre3-dev"

}

dna-install_certbot() {

	dna-echo_operation -h "installing certbot/letsencrypt"

	dna-get_distro_name

	if [ "${distro_name}" = "ubuntu" ]
	then

		dna-install_dependencies -p "software-properties-common"
		apt-add-repository -yu ppa:certbot/certbot
		echo
		dna-install_dependencies -p "certbot"

	elif [ "${distro_name}" = "debian" ]
	then

        dna-enable_debian_backports_repo
        apt-get update
        echo
		apt-get -y install certbot -t stretch-backports
		echo

	fi

	certbot -n &> /dev/null || true

	dna-echo_operation -t

}

dna-install_dependencies() {

    ############################################################################

    if [ $# -eq 0 ]
    then
        dna-echo -e "No argument supplied for function | ${r-}${FUNCNAME[0]}${n-} |."
        dna-exit
    fi

    while getopts ":ep:" arguments
    do
        case "${arguments}" in
            e)	allow_errors="y"
                ;;
            p)	packages="${OPTARG}"
                ;;
            \?)	dna-echo -e "Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
                dna-exit
                ;;
        esac
    done
    OPTIND=1

    if [ -z "${packages-}" ]
    then
        dna-echo -e "Argument | ${n-}packages [-p]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

    ############################################################################

    dna-echo_operation -h "installing dependencies"

    dna-check_dpkg_availability

    dna-apt_update

    if ! apt-get -y install $packages                                           ### Do NOT escape this variable
    then

        echo

        if [ "${allow_errors-null}" = "y" ] || [ "${dna_global_allow_apt_errors-null}" = "y" ]
        then

            dna-echo -e "An error occured performing APT operations."
            dna-echo -m "It is likely that by continuing the installation this and any other errors collected along the way will be naturally resolved."

            dna-ask_for_boolean -d "y" -q "Would you like to continue the installation anyway?"

            if [ "${boolean_output}" = "y" ]
            then
                dna-echo -n -m "Ok, continuing installation anyway..."
            else
                dna-echo -m "Ok, aborting..."
                dna-exit
            fi

        else

            dna-echo -e "An error occured performing APT operations."
            dna-exit

        fi

    fi

    echo

    set -e

    dna-echo_operation -t

    unset allow_errors
    unset packages

}

dna-install_duplicity() {

	dna-echo_operation -h "installing the duplicity backup utility"

	dna-get_distro_name

	if [ "${distro_name}" = "ubuntu" ]
	then
		dna-install_dependencies -p "software-properties-common"
		add-apt-repository -y ppa:duplicity-team/duplicity-release-git
		echo
	fi

	dna-install_dependencies -p "libpcre3-dev duplicity python-pip s3cmd pwgen curl pv"
	pip install --upgrade pip
	/usr/local/bin/pip install boto
	/usr/local/bin/pip install --upgrade boto
	echo

	dna-echo_operation -t

}

dna-install_easyengine() {

    ############################################################################

    ### Install dependencies

    dna-install_wget

    ############################################################################

	dna-echo_operation -h "[re-]installing and updating EasyEngine"

	wget -qO ee https://raw.githubusercontent.com/easyengine/installer/master/setup.sh || true
	bash ee || true
	rm ee
	echo

    if dpkg -s ufw &> /dev/null
    then
    	ufw allow 80 || true
    	ufw allow 443 || true
    	echo
    fi

	dna-echo_operation -t

    ############################################################################

}

dna-install_etcd () {

    dna-get_distro_name

    if [ "${distro_name}" = "ubuntu" ]
    then

        dna-install_dependencies -p "etcd"

    elif [ "${distro_name}" = "debian" ]
    then

        dna-enable_debian_testing_repo

        dna-install_dependencies -p "etcd-server"
        dna-install_dependencies -p "etcd"

    fi

}

dna-install_mail_notifications() {

    while getopts ":f" arguments
    do
        case "${arguments}" in
            f)	force="y"
                ;;
            \?)	dna-echo -e "Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
                dna-exit
                ;;
        esac
    done
    OPTIND=1

    hostname="$(cat /etc/hostname)"

    dna-get_distro_name

    install_mailutils() {

        ### [re-]Install mailutils

        debconf-set-selections <<< "postfix postfix/mailname string $hostname"
        debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"

        if [ "${distro_name}" = "ubuntu" ]
    	then

            dna-install_dependencies -p "mailutils"

        elif [ "${distro_name}" = "debian" ]
        then

            dna-install_dependencies -p "mailutils postfix"

        fi

        ### Reload postfix

        systemctl daemon-reload
        systemctl enable --now postfix

        /etc/init.d/postfix reload
        echo

    }

    install_mail_notifications_proceed() {

        dna-echo_operation -h "[purging and re-]installing the local mailserver"

        ### Purge any existing local server installation

        apt-get -y purge mailutils postfix || true

        echo

        install_mailutils

        dna-echo_operation -t

    }

    if [ "${force-null}" = "y" ]
    then

        install_mail_notifications_proceed

    else

        dna-ask_for_boolean -d "y" -q "[Purge and re-]install the local mailserver for task notifications?"

        if [ "${boolean_output}" = "y" ]
        then

            dna-echo -m "Ok, proceeding..."

            install_mail_notifications_proceed

        else

            dna-echo -m "Ok, skipping."

    	fi

        unset boolean_output

    fi

    unset install_mailutils force

}

dna-install_mosh_tmux() {

    ### ########################################################################

    ### install mosh.

    ### ########################################################################

    dna-echo_operation -h "installing Mosh"

    #### install.

    dna-get_distro_name

    if [ "${distro_name}" = "ubuntu" ]
    then
        dna-install_dependencies -p "software-properties-common"
        add-apt-repository -y ppa:keithw/mosh
        apt-get update
        echo
    fi

    dna-install_dependencies -p "mosh tmux"

    #### open ports on firewall if ufw is installed.

    if dpkg -s ufw &> /dev/null
    then
        ufw allow 60000:61000/udp
    else
        iptables -I INPUT 1 -p udp --dport 60000:61000 -j ACCEPT
    fi
    echo

    #### install config for mouse scroll.
    #### https://superuser.com/questions/210125/scroll-shell-output-with-mouse-in-tmux
    #### https://blog.filippo.io/my-remote-shell-session-setup/

    cat <<EOF > ~/.tmux.conf
new-session
set -g mouse on
set-window-option -g mode-mouse on
set -g mouse-select-pane on
set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"
set -g history-limit 30000
setw -g alternate-screen on
set -s escape-time 50
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'"
EOF

    dna-echo_operation -t

    ### ########################################################################

}

dna-install_nginx() {

    dna-echo_operation -h "installing NGINX"

    dna-get_distro_name
    dna-get_distro_codename

    curl -O https://nginx.org/keys/nginx_signing.key && apt-key add ./nginx_signing.key
    rm ./nginx_signing.key
    echo "deb http://nginx.org/packages/${distro_name}/ ${distro_codename} nginx" > "/etc/apt/sources.list.d/nginx.list"
    echo "deb-src http://nginx.org/packages/${distro_name}/ ${distro_codename} nginx" >> "/etc/apt/sources.list.d/nginx.list"
    apt-get update
    echo

    dna-install_dependencies -p "nginx"

    dna-echo_operation -t

}

dna-install_nodejs() {

    ### Run nodesource setup script

    curl -sL https://deb.nodesource.com/setup_10.x | bash -

    ### Get distro_name

    dna-get_distro_name

    ### If this is debian install pin the nodesource repo to top priority

    if [ "${distro_name}" = "debian" ]
	then
		touch "/etc/apt/preferences"
		if ! grep -q "deb.nodesource.com" "/etc/apt/preferences"
		then
			cat <<EOF >> "/etc/apt/preferences"

Package: *
Pin: origin "deb.nodesource.com"
Pin-Priority: 1000
EOF
		fi
	fi

    ### Install

    apt-get update
    echo

    dna-install_dependencies -p "nodejs"


}

dna-install_ping() {

    dna-install_dependencies -p "iputils-ping"

}

dna-install_postgresql() {

    ############################################################################

    ### Install dependencies

    dna-install_wget

    ############################################################################

    dna-echo_operation -h "installing PostgreSQL"

    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

    dna-get_distro_codename

    echo "deb http://apt.postgresql.org/pub/repos/apt/ ${distro_codename}"-pgdg main > "/etc/apt/sources.list.d/pgdg.list"
    echo

    dna-get_distro_name

    if [ "${distro_name}" = "debian" ]
	then

		touch "/etc/apt/preferences"
		if ! grep -q "apt.postgresql.org" "/etc/apt/preferences"
		then
			cat <<EOF >> "/etc/apt/preferences"

Package: *
Pin: origin "apt.postgresql.org"
Pin-Priority: 1000
EOF
		fi

        apt-get update
        echo

        apt-get -y install "postgresql-client-common"
        apt-get -y install "postgresql-client-11"
        echo

    else

        apt-get update
        echo

	fi

    dna-install_dependencies -p "postgresql-11"

    dna-echo_operation -t

    ############################################################################

}

dna-localize_sslh_install() {

    ### Prepare the installation environment by reading the current system SSH port and fetching IP connectivity information

    dna-read_conf_settings

    dna-get_public_ipv4 -s
    dna-check_ipv6_connectivity -s

    ### Localize install with this machine's info

    sed -i "s|ssh_port-var|${ssh_port}|g" "/etc/sslh.cfg"

	sed -i "s|public_ipv4-var|${public_ipv4}|g" "/etc/sslh.cfg"

    if [ "${ipv6_available}" = "y" ]
	then
		sed -i "s|#ipv6_comma|,|g" "/etc/sslh.cfg"
		sed -i "s|#ipv6_line||g" "/etc/sslh.cfg"
		sed -i "s|this_ipv6-var|${this_ipv6}|g" "/etc/sslh.cfg"
	else
		sed -i "s|#ipv6_comma||g" "/etc/sslh.cfg"
		sed -i "s|#ipv6_line|#|g" "/etc/sslh.cfg"
	fi

}

dna-install_sslh() {

    dna-echo_operation -h "installing SSLH"

    ############################################################################

    ### Abort installation if current SSH session is being carried out over SSLH itself

    dna-abort_on_sslh_session

    ############################################################################

    ### Install dependencies

	dna-install_build_tools
    dna-install_dependencies -e -p "libwrap0-dev libconfig-dev"

    ############################################################################

    ### Stop / kill if it's already installed and currently running

    if systemctl is-active --quiet sslh
    then
    	/usr/sbin/service sslh stop
    fi

    if pgrep sslh &> /dev/null ; then killall sslh ; fi

    ############################################################################

    ### Clone

    if [ -d "${tmp_project_dir}/sslh" ]
    then
        rm -r "${tmp_project_dir}/sslh"
    fi

	git clone https://github.com/yrutschle/sslh "${tmp_project_dir}/sslh"

    ############################################################################

    ### Install

	( cd "${tmp_project_dir}/sslh" && git checkout v1.20 && make install && make && cp sslh-select /usr/local/sbin/sslh )
    echo

    ############################################################################

    ### Install default config files

    cat <<EOF >/etc/sslh.cfg
foreground: false;
inetd: false;
numeric: false;
transparent: false;
timeout: 2;
user: "nobody";
pidfile: "/var/run/sslh.pid";

syslog_facility: "auth";

listen:
(
    { host: "public_ipv4-var";       port: "443"; }#ipv6_comma
#ipv6_line    { host: "this_ipv6-var";       port: "443"; }
);

protocols:
(
    { name: "ssh";      host: "localhost";          port: "ssh_port-var";     keepalive: true; fork: true;                                },
    { name: "tls";      host: "localhost";          port: "443";    log_level: 0;                                               }
);

on-timeout: "timeout";
EOF

	cat <<EOF >/etc/init.d/sslh
#! /bin/sh

### BEGIN INIT INFO
# Provides:		sslh
# Required-Start:    \$remote_fs \$syslog
# Required-Stop:     \$remote_fs \$syslog
# Default-Start:	2 3 4 5
# Default-Stop:		1
# Short-Description:	sslh proxy ssl & ssh connections
### END INIT INFO

set -e
tag=sslh
facility=user.info

# /etc/init.d/sslh: start and stop the sslh proxy daemon

if test -f /etc/default/sslh; then
    . /etc/default/sslh
fi

# The prefix is normally filled by make install. If
# installing by hand, fill it in yourself!
PREFIX=/usr/local
DAEMON=\$PREFIX/sbin/sslh

start()
{
        echo "Start services: sslh"
        mkdir -p /var/run/sslh/
        touch /var/run/sslh/sslh.pid
        \$DAEMON -F/etc/sslh.cfg
        logger -t \${tag} -p \${facility} -i 'Started sslh'
}

stop()
{
        echo "Stop services: sslh"
	killall \$DAEMON
      	logger -t \${tag} -p \${facility} -i 'Stopped sslh'
}


case "\$1" in
	  start)
		    start
		    ;;
	  stop)
		    stop
		    ;;
    restart)
		    stop
		    sleep 5
		    start
		    ;;
	  *)
		    echo "Usage: /etc/init.d/sslh {start|stop|restart}" >&2
		    ;;
esac

exit 0
EOF

    ############################################################################

    dna-localize_sslh_install

    ############################################################################

    ### Finish

	chmod +x "/etc/init.d/sslh"

	update-rc.d sslh defaults

	systemctl daemon-reload

	rm -r "${tmp_project_dir}/sslh"

	mkdir -p /var/run/sslh
	touch /var/run/sslh/sslh.pid

    ############################################################################

    ### Activate

	/usr/sbin/service sslh restart || true

	echo

	dna-echo_operation -t

}

dna-install_tor() {

    ### https://2019.www.torproject.org/docs/debian.html.en

    dna-echo_operation -h "installing Tor"

    ### Import key

    curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import
    gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -

    echo

    ### Add repo

    dna-get_distro_codename

    echo "deb https://deb.torproject.org/torproject.org ${distro_codename} main" > "/etc/apt/sources.list.d/tor.list"
    echo "deb-src https://deb.torproject.org/torproject.org ${distro_codename} main" >> "/etc/apt/sources.list.d/tor.list"

    apt-get update
    echo

    ### Install

    dna-install_dependencies -p "tor deb.torproject.org-keyring"

    dna-echo_operation -t

}

dna-install_wget() {

    dna-install_dependencies -p "wget"

}
