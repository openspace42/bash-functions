#!/usr/bin/env bash

: ' Intro and documentation:

    ----------------------------------------------------------------------------

    dna-check_dns_record():

		This function verifies DNS records [A/AAAA/SRV].

		------------------------------------------------------------------------

        These are the possible arguments to be passed to this function:

		name [required]:

			must be a DNS name [e.g. ae.os.vu]

		type [required]:

			must be either:

				a
				aaaa
				srv

		reference [required]:

			must be either:

				1] A string with a comma-separated list of values [no spaces] [e.g.: "1.1.1.1,2.2.2.2,4.4.4.4,8.8.8.8"]
				2] An absolute path to a file with a newline-separated list of IPs

			the reference can be "delete" to indicate that the record must NOT be set at all.

			the reference can include a "null" value that will be ignored as if it were a comment.

				For example: -r "1.1.1.1, 2.2.2.2, null, 4.4.4.4"

		------------------------------------------------------------------------

		These are the operations to be run after having called this function:

		unset dns_checks_outcome [recommended]:

			This will unset any choice made by the user to skip "all" DNS checks,
			including ones to come. If your code has several, logically unrelated
			DNS checks blocks, remember to include this operation after one block
			if the one coming after it should ignore any "exit" choice made by the
			user.

		------------------------------------------------------------------------

    ----------------------------------------------------------------------------

# '

dna-check_dns_record() {

	############################################################################

	### Check if the user has previously selected to skip all DNS checks

	if [ "${dns_checks_outcome-null}" = "exit" ]
	then
		return 0
	fi

	### Unset any previously set "skip" choice

	if [ "${dns_checks_outcome-null}" = "skip" ]
	then
		unset dns_checks_outcome
	fi

	############################################################################

	if [ $# -eq "0" ]
    then
        dna-echo -e "No argument supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

    while getopts ":n:t:r:" arguments; do
        case $arguments in
            n)	name="${OPTARG}"
	            ;;
			t)	type="${OPTARG}"
	            ;;
			r)	reference="${OPTARG}"
	            ;;
            \?)	dna-echo -e "Invalid option | ${n-}-${OPTARG}${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
	            dna-exit
	            ;;
        esac
    done
    OPTIND=1

    if [ -z "${name-}" ]
    then
        dna-echo -e "Argument | ${n-}name [-n]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	if [ -z "${type-}" ]
    then
        dna-echo -e "Argument | ${n-}type [-t]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	if [ -z "${reference-}" ]
    then
        dna-echo -e "Argument | ${n-}reference [-r]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	############################################################################

	dns_checks_dir="/tmp/dns_checks"
	name_file_path="${dns_checks_dir}/${type}-${name}"

	mkdir -p "${dns_checks_dir}"

	############################################################################

	### Check supplied reference type

	reference_leading_char="$(echo ${reference} | cut -c1-1)"

	if [ $reference_leading_char = "/" ]
	then
		reference_type=file
	else
		reference_type=array
	fi

	reference_file_path="${dns_checks_dir}/reference"

	if [ $reference_type = "file" ]
	then

		### Check that the file actually exists

		if [ ! -f "${reference}" ]
		then
			dna-echo -e "The specified reference file does NOT exist."
			dna-exit
		fi

		### Copy specified file to /tmp/

		cp "${reference}" "${reference_file_path}"

	else

		### Write specified array to a text file in /tmp/

		echo "${reference}" | tr "," "\n" > "${reference_file_path}"

	fi

	if ! grep -q '[^[:space:]]' "${reference_file_path}"
	then
		dna-echo -m "${r-}Reference file is empty."
        dna-exit
	fi

	### Check for a "delete" reference

	if grep -q "delete" "${reference_file_path}"
	then
		### Mark the record as to be delete
		delete_record=y
		### Actually clear the contents of the reference file
		> "${reference_file_path}"
	fi

	### Remove any "null" values from the reference file

	sed -i '/^null$/d' "${reference_file_path}"

	### Remove any blank lines from the reference file

	sed -i '/^$/d' "${reference_file_path}"

	### Read array out of $reference_file_path

	readarray -t reference_array < "${reference_file_path}"

	############################################################################

	if [ "${type}" = "a" ]
	then
		version=4
	elif [ "${type}" = "aaaa" ]
	then
		version=6
	fi

	############################################################################

	### Validate all reference items if record type is an address [A / AAAA]

	if [ ! -z "${version-}" ]
	then
		for reference_item in "${reference_array[@]}"
		do
			dna-validate_ipv"${version}" -s -i "${reference_item}"
			if [ "${ip_is_valid}" = "n" ]
			then
				dna-echo -e "The reference value | ${n-}${reference_item}${r-} | is not a valid | ${n-}IPv${version-}${r-} | address."
				dna-exit
			fi
            unset silent
		done
		unset reference_item
	fi

	############################################################################

	### Convert $type to uppercase for printed messages

	type_name="$(echo ${type} | awk '{print toupper($0)}')"

	############################################################################

	lookup_name(){

        ### Determine authoritative nameserver for this domain

        top_level_domain="$(echo ${name} | grep -o '[^.]*\.[^.]*$')"

        authoritative_ns_for_domain="$(host -t soa "${top_level_domain}" | sed -n -e 's/^.*has SOA record //p' | sed 's~. .*~~')"

        if [ -z "${authoritative_ns_for_domain}" ]
        then
            dna-echo -e "There appears to be no authoritative DNS nameserver for: | ${n-}${name}${r-} |."
            dna-echo -m "Double-check this hostname and try again."
            return 1
        fi

		if [ ! -z "${version-}" ]
		then

			host -t "${type}" "${name}" "${authoritative_ns_for_domain}" | sed -n -e 's/^.*address //p' > "${name_file_path}"

		elif [ "${type}" = "srv" ]
		then

			host -t srv "${name}" "${authoritative_ns_for_domain}" | sed -n -e 's/^.*has SRV record //p' > "${name_file_path}"

		fi

		readarray -t name_array < "${name_file_path}"

	}

	array_contains() {
	    local array="$1[@]"
	    local seeking="$2"
	    local in=1
	    for element in "${!array-}"
		do
	        if [[ "$element" == "$seeking" ]]
			then
	            in=0
	            break
	        fi
	    done
	    return $in
	}

	read_choice() {

		if [ $# -eq 0 ]
	    then
	        dna-echo -m "${r-}No argument supplied for function | ${FUNCNAME[0]} |."
	        dna-exit
	    fi

		while getopts ":m:" arguments; do
	        case $arguments in
	            m)	choice_message="$OPTARG"
		            ;;
	            \?)	dna-echo -m "${r-}Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |."
		            dna-exit
		            ;;
	        esac
	    done
	    OPTIND=1

        unset valid

		until [ "${valid-null}" = "y" ]
		do

			read -n 1 -rp "${b-}${choice_message}${x-} (${b-}Y${x-}[es]/${b-}s${x-}[kip this check]/${b-}e${x-}[xit all checks]) " answer;
			case $answer in
				"")	echo
					valid=y
					accept=n
					dns_checks_outcome="recheck"
					;;
				y)	echo -e "\\n"
					valid=y
					accept=n
					dns_checks_outcome="recheck"
					;;
				s)	echo -e "\\n"
					dna-echo -m "Ok, skipping DNS check for this record..."
					valid=y
					accept=y
					dns_checks_outcome="skip"
					;;
				e)	echo -e "\\n"
					dna-echo -m "Ok, exiting this and all subsequent DNS checks..."
					valid=y
					accept=y
					dns_checks_outcome="exit"
					;;
				*)	echo -e "\\n"
					dna-echo -m "${r-}Invalid option. Try again..."
					valid=n
					accept=n
					;;
			esac

		done
		unset valid

	}

	############################################################################

	### Check that every item in reference_array is contained in name_array

	if [ ! "${delete_record-null}" = "y" ]
	then

		for reference_item in "${reference_array[@]}"
		do

			until [ "${accept-null}" = "y" ]
			do

				reference_item_name="$(echo ${reference_item} | xargs)"

				lookup_name

				result=$(array_contains name_array "${reference_item}" && echo y || echo n)

		        if [ "${result}" = "y" ]
		        then

		            dna-echo -m "${g-}The | ${n-}${type_name}${g-} | record | ${n-}${reference_item_name}${g-} | for DNS name | ${n-}${name}${g-} | is registered correctly."

					dns_checks_outcome="ok"
					accept="y"

		        else

					incorrect_iteration=$(( ${incorrect_iteration-} + 1 ))

					if [ "${incorrect_iteration}" = "1" ]
					then

						dna-echo -m "${r-}The | ${n-}${type_name}${r-} | record | ${n-}${reference_item_name}${r-} | for DNS name | ${n-}${name}${r-} | is NOT registered."

						if [ "${autoset_dns-null}" = "y" ]
						then

							dna-echo -m "Automatically setting this record on your DNS provider."
							dns_checks_outcome="autofix"
							dna-set_dns_record [...]

						else

							dna-echo -m "You must now set this record on the authoritative DNS provider for this zone."

							if [ "${dns_provider_setup-null}" = "y" ]
							then
					            dna-ask_for_boolean -d "y" -q "Would you like to automatically set this record on [one of] your previously specified DNS provider[s]?"
					            if [ "${boolean_output}" = "y" ]
					            then
									dna-echo -m "Ok, automatically setting this DNS record."
									dns_checks_outcome="autofix"
									dna-set_dns_record [...]
								else
									dna-echo -m "Ok, therefore you must manually set this DNS record."
									read_choice -m "Are you ready to check this DNS record again now?"
									if [ "${dns_checks_outcome}" = "skip" ] || [ "${dns_checks_outcome}" = "exit" ]
									then
										unset name type version reference incorrect_iteration valid accept
										return 0
									fi
								fi
							else
								read_choice -m "Are you ready to check this DNS record again now?"
								if [ "${dns_checks_outcome}" = "skip" ] || [ "${dns_checks_outcome}" = "exit" ]
								then
									unset name type version reference incorrect_iteration valid accept
									return 0
								fi
							fi

						fi

					elif [ "${incorrect_iteration}" -le "4" ]
					then

						dna-echo -m "${r-}The | ${n-}${type_name}${r-} | record | ${n-}${reference_item_name}${r-} | for DNS name | ${n-}${name}${r-} | still appears NOT to be registered."

						if [ "${dns_checks_outcome}" = "recheck" ]
						then
							dna-echo -m "As we wait before we check again, ensure you've correctly set the record on your DNS provider."
						fi

						wait="$[${incorrect_iteration}**2]"
						tput sc
						while [ "${wait}" -ge "0" ]
						do
						    case $((wait % 4)) in
						        0 ) j="-" ;;
						        1 ) j="/" ;;
						        2 ) j="|" ;;
						        3 ) j="\\" ;;
						    esac
						    tput rc
						    echo -en "\\r${b-}| ${o-}${j}${n-} | Now waiting ${y-}${wait}${n-} more seconds before checking again...${x-}"
						    sleep 1
						    ((wait=wait-1)) || true
						done
						echo
						echo

					else

						dna-echo -e "The | ${n-}${type_name}${r-} | record | ${n-}${reference_item_name}${r-} | for DNS name | ${n-}${name}${r-} | still appears NOT to be registered after several lookups."
						dna-echo -m "This could be due to longer than normal systems updating times or incorrect settings on your DNS provider."
						dna-echo -m "Also ensure you're applying the correct setting to the authoritative DNS provider for this zone."

						read_choice -m "Perform checks for this DNS record once again from the beginning?"
						if [ "${dns_checks_outcome}" = "skip" ] || [ "${dns_checks_outcome}" = "exit" ]
						then
							unset name type version reference incorrect_iteration valid accept
							return 0
						fi

						unset incorrect_iteration dns_checks_outcome

					fi

				fi

			done

			unset incorrect_iteration dns_checks_outcome valid accept

		done

	fi

	############################################################################

	### Check if name_array has additional incorrect values

	calculate_extra_diff() {

	if [ -n "${name_array-}" ]
	then

		diff_array=()
		for name_item in "${name_array[@]}"
		do
		     skip=
		     for reference_item in "${reference_array[@]}"
			 do
		         [[ $name_item == $reference_item ]] && { skip=1; break; }
		     done
		     [[ -n $skip ]] || diff_array+=("$name_item")
		done
		declare -p diff_array &> /dev/null

	else

		unset diff_array

	fi

	}

	if [ ! "${dns_checks_outcome-null}" = "skip" ] && [ ! "${dns_checks_outcome-null}" = "exit" ]
	then

		lookup_name

		calculate_extra_diff

		if [ -n "${diff_array-}" ]
		then

			for diff_item in "${diff_array[@]}"
			do

				diff_item_name="$(echo ${diff_item} | xargs)"

				until [ "${accept-null}" = "y" ]
				do

					### Check to see if this extra item is still actually erroneously registered on DNS

					lookup_name

					calculate_extra_diff

					result=$(array_contains diff_array "${diff_item}" && echo y || echo n)

					if [ "${result}" = "n" ]
			        then

						dna-echo -m "${g-}The | ${n-}${type_name}${g-} | record | ${n-}${diff_item_name}${g-} | for DNS name | ${n-}${name}${g-} | has been correctly removed."

						dns_checks_outcome="ok"
						accept="y"

					else

						incorrect_iteration=$(( ${incorrect_iteration-} + 1 ))

						if [ "${incorrect_iteration}" = "1" ]
						then

							dna-echo -m "${r-}The | ${n-}${type_name}${r-} | record | ${n-}${diff_item_name}${r-} | for DNS name | ${n-}${name}${r-} | is registered but should NOT be."

							if [ "${autoset_dns-null}" = "y" ]
							then

								dna-echo -m "Automatically removing this record on your DNS provider."
								dns_checks_outcome="autofix"
								dna-set_dns_record [...]

							else

								dna-echo -m "You must now remove this record on the authoritative DNS provider for this zone."

								if [ "${dns_provider_setup-null}" = "y" ]
								then
						            dna-ask_for_boolean -d "y" -q "Would you like to automatically remove this record on [one of] your previously specified DNS provider[s]?"
						            if [ "${boolean_output}" = "y" ]
						            then
										dna-echo -m "Ok, automatically removing this DNS record."
										dns_checks_outcome="autofix"
										dna-set_dns_record [...]
									else
										dna-echo -m "Ok, therefore you must manually remove this DNS record."
										read_choice -m "Are you ready to check this DNS record again now?"
										if [ "${dns_checks_outcome}" = "skip" ] || [ "${dns_checks_outcome}" = "exit" ]
										then
											unset name type version reference incorrect_iteration valid accept
											return 0
										fi
									fi
								else
									read_choice -m "Are you ready to check this DNS record again now?"
									if [ "${dns_checks_outcome}" = "skip" ] || [ "${dns_checks_outcome}" = "exit" ]
									then
										unset name type version reference incorrect_iteration valid accept
										return 0
									fi
								fi

							fi

						elif [ "${incorrect_iteration}" -le "4" ]
						then

							dna-echo -m "${r-}The | ${n-}${type_name}${r-} | record | ${n-}${diff_item_name}${r-} | for DNS name | ${n-}${name}${r-} | still appears to be registered even though it should NOT be."

							if [ "${dns_checks_outcome}" = "recheck" ]
							then
								dna-echo -m "As we wait before we check again, ensure you've correctly removed the record on your DNS provider."
							fi

							wait="$[${incorrect_iteration}**3]"
							tput sc
							while [ "${wait}" -ge "0" ]
							do
							    case $((wait % 4)) in
							        0 ) j="-" ;;
							        1 ) j="/" ;;
							        2 ) j="|" ;;
							        3 ) j="\\" ;;
							    esac
							    tput rc
							    echo -en "\\r${b-}| ${o-}${j}${n-} | Now waiting ${y-}${wait}${n-} more seconds before checking again...${x-}"
							    sleep 1
							    ((wait=wait-1)) || true
							done
							echo
							echo

						else

							dna-echo -e "The | ${n-}${type_name}${r-} | record | ${n-}${diff_item_name}${r-} | for DNS name | ${n-}${name}${r-} | still appears to be registered after several lookups even though it should NOT be."
							dna-echo -m "This could be due to longer than normal systems updating times or incorrect settings on your DNS provider."
							dna-echo -m "Also ensure you're removing the record from the authoritative DNS provider for this zone."

							read_choice -m "Perform checks for this DNS record once again from the beginning?"
							if [ "${dns_checks_outcome}" = "skip" ] || [ "${dns_checks_outcome}" = "exit" ]
							then
								unset name type version reference incorrect_iteration valid accept
								return 0
							fi

							unset incorrect_iteration dns_checks_outcome

						fi

					fi

				done

				unset incorrect_iteration dns_checks_outcome valid accept

			done

		fi

	fi

	############################################################################

	if [ ! "${dns_checks_outcome-null}" = "skip" ] && [ ! "${dns_checks_outcome-null}" = "exit" ]
	then

		dna-echo -s "All | ${n-}${type_name}${g-} | DNS checks for name | ${n-}${name}${g-} | completed successfully."

	fi

	rm -rf "${dns_checks_dir}"

	unset name type version reference valid

	if [ ! "${dns_checks_outcome-null}" = "exit" ]
	then
		unset dns_checks_outcome
	fi

}
