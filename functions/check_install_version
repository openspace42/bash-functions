#!/usr/bin/env bash

dna-check_install_version() {

    ### Check if a previous installation was at the very least initiated.

    if [ -f "${conf_dir}/version/version_initiated" ]
    then

        prev_install_initiated="y"
        prev_version_initiated="$(cat ${conf_dir}/version/version_initiated)"

        dna-echo -s "Found a previous install of ${project_name}."
        dna-ask_for_boolean -d "y" -q "Skip the introduction on how it works?"

        if [ "${boolean_output}" = "y" ]
        then
            skip_intro="y"
        else
            skip_intro="n"
        fi
        clear

        if [ "${skip_intro}" = "y" ]
        then
            
            dna-ask_for_boolean -d "n" -q "[development only] Skip full installation and only pull updated project files?"

            if [ "${boolean_output}" = "y" ]
            then
                skip_full_installation="y"
            else
                skip_full_installation="n"
            fi
            clear
            
        fi

    else

        ### If instead this is the first install...

        mkdir -p "${conf_dir}/version/"
        skip_intro="n"
        skip_full_installation="n"

    fi

    ### Log current version being initiated to version_initiated.

    echo "${selected_vers}" > "${conf_dir}/version/version_initiated"

    ### If a previous installation was at the very least initiated...

    if [ "${prev_install_initiated-null}" = "y" ]
    then

        ### If a previous version was successfully finished installing...

        if [ -f "${conf_dir}/version/version_installed" ]
        then

            ### Check that prev_version_initiated and prev_version_installed match.

            prev_version_installed="$(cat ${conf_dir}/version/version_installed)"

            if [ "${prev_version_installed}" = "${prev_version_initiated}" ]
            then

                ### Versions match, therefore the latest previous install was completed successfully.
                ### Proceed to ensure that, if we're not installing a bleeding-edge version, there's no more recent version already installed.
                ### If instead we're installing a bleeding-edge version, skip any checks as we're certainly intalling a newer version.

                if [ ! "${custom_project_version-null}" = "b" ]
                then

                    if grep -q "+" "${conf_dir}/version/version_installed"
                    then

                        dna-echo -m "You're now installing stable version | ${c-}${selected_vers}${n-} | over a previously | ${r-}bleeding-edge${n-} | version of ${project_name}."
                        dna-echo -m "This is normal if you're intentionally installing a stable release, but keep in mind that some features might stop working if they haven't yet been implemented in this latest stable version."
                        dna-press_to_continue

                    else

                        ### Alert in case of an imminent downgrade

                        if semverLT "${selected_vers}" "${prev_version_installed}"
                        then
                            dna-echo -e "You have previously installed a newer version of ${project_name}."
                            dna-echo -m "This is likely an error. If you're trying to manually downgrade to a previous version, and you're sure you want to do so, then edit the installer to bypass this check."
                            dna-exit
                        fi

                    fi

                    ### In any event, alert about the re-install

                    dna-echo -m "You're now re-running the ${project_name} installer."
                    dna-echo -s "This is perfectly fine as ${project_name} is meant to be re-installed as many times as you'd like [also to update your current installation]."
                    dna-echo -e "Keep in mind though that all customizations external to ${project_name} you might have made will be permanently deleted."
                    dna-echo -m "This is because the installation script goes through every configuration and sets the default values, with no regard to any anomaly it finds."
                    dna-echo -e "If you want to save any customizations you have made, exit this script and do so now."
                    dna-press_to_continue

                fi

            else

                ### It appears the previous install was not completed successfully, as version_initiated is different from version_installed.

                prev_install_incomplete="y"

            fi

        else

            ### It appears the previous install was not completed successfully, as there is no version_installed file, only the version_initiated one.

            prev_install_incomplete="y"

        fi

        if [ "${prev_install_incomplete-null}" = "y" ]
        then
            dna-echo -e "It appears you have a previous incomplete installation of ${project_name}."
            dna-echo -m "Either you intentionally aborted the install or the script got somehow terminated before it finished."
            dna-echo -m "In either case, if you're having any trouble, please open an issue. Thanks!"
            dna-press_to_continue
            clear
        fi

        ### In any event, since there is a previous installation, at least partial, prompt for a backup.

        if [ "${backup_prompt_during_install}" = "y" ]
        then

            dna-echo -m "It's highly recommended to run one last, fully automated backup before you proceed with the aenigma installer re-run."
            dna-ask_for_boolean -d "y" -q "Do you want to run the backup now [without exiting this script]?"
            if [ "${boolean_output}" = "y" ]
            then

                dna-echo -n -m "Ok, proceeding with backup..."

                if bash "${source_dir}/tools/${project_name}-backup" -s
                then

                    backup_output="ok"

                else

                    backup_output="failed"

                fi

                sleep 1

                if [ "${backup_output}" = "ok" ]
                then

                    dna-echo -s "Backup complete. Continuing installation..."

                else

                    dna-echo -e "Backup failed. It's likely that by completing this installation the backup functionality will be restored, but proceed at your own risk."
                    dna-ask_for_boolean -d "y" -q "Continue anyway even without a backup?"

                    if [ "${boolean_output}" = "y" ]
                    then

                        dna-echo -m "Ok, continuing..."

                    else

                        dna-echo -m "Ok, aborting..."
                        dna-exit

                    fi

                fi

            else

                dna-echo -m "Ok, skipping backup..."

            fi

        fi

    fi

}
